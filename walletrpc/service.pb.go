// Copyright (c) 2019-2020 The Zcash developers
// Copyright (c) 2019-2021 Pirate Chain developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or https://www.opensource.org/licenses/mit-license.php .

// Code generated by protoc-gen-go. DO NOT EDIT.
// 	protoc-gen-go 	v1.28.0
//  protoc 					v3.21.9
// source: service.proto

/*
Package walletrpc is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	BlockID
	BlockRange
	TxFilter
	RawTransaction
	SendResponse
	ChainSpec
	Empty
	LightdInfo
	TransparentAddressBlockFilter
	Duration
	PingResponse
	Address
	AddressList
	Balance
	Exclude
	TreeState
	GetAddressUtxosArg
	GetAddressUtxosReply
	GetAddressUtxosReplyList
	PriceRequest
	PriceResponse
*/
package walletrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A BlockID message contains identifiers to select a block: a height or a
// hash. Specification by hash is not implemented, but may be in the future.
type BlockID struct {
	Height uint64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Hash   []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *BlockID) Reset()                    { *m = BlockID{} }
func (m *BlockID) String() string            { return proto.CompactTextString(m) }
func (*BlockID) ProtoMessage()               {}
func (*BlockID) Descriptor() ([]byte, []int) { return file_service_proto_rawDesc, []int{0} }

func (m *BlockID) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockID) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

// BlockRange specifies a series of blocks from start to end inclusive.
// Both BlockIDs must be heights; specification by hash is not yet supported.
type BlockRange struct {
	Start *BlockID `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	End   *BlockID `protobuf:"bytes,2,opt,name=end" json:"end,omitempty"`
}

func (m *BlockRange) Reset()                    { *m = BlockRange{} }
func (m *BlockRange) String() string            { return proto.CompactTextString(m) }
func (*BlockRange) ProtoMessage()               {}
func (*BlockRange) Descriptor() ([]byte, []int) { return file_service_proto_rawDesc, []int{1} }

func (m *BlockRange) GetStart() *BlockID {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *BlockRange) GetEnd() *BlockID {
	if m != nil {
		return m.End
	}
	return nil
}

// A TxFilter contains the information needed to identify a particular
// transaction: either a block and an index, or a direct transaction hash.
// Currently, only specification by hash is supported.
type TxFilter struct {
	Block *BlockID `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
	Index uint64   `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Hash  []byte   `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TxFilter) Reset()                    { *m = TxFilter{} }
func (m *TxFilter) String() string            { return proto.CompactTextString(m) }
func (*TxFilter) ProtoMessage()               {}
func (*TxFilter) Descriptor() ([]byte, []int) { return file_service_proto_rawDesc, []int{2} }

func (m *TxFilter) GetBlock() *BlockID {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *TxFilter) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TxFilter) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

// RawTransaction contains the complete transaction data. It also optionally includes
// the block height in which the transaction was included, or, when returned
// by GetMempoolStream(), the latest block height.
type RawTransaction struct {
	Data   []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Height uint64 `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
}

func (m *RawTransaction) Reset()                    { *m = RawTransaction{} }
func (m *RawTransaction) String() string            { return proto.CompactTextString(m) }
func (*RawTransaction) ProtoMessage()               {}
func (*RawTransaction) Descriptor() ([]byte, []int) { return file_service_proto_rawDesc, []int{3} }

func (m *RawTransaction) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RawTransaction) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// A SendResponse encodes an error code and a string. It is currently used
// only by SendTransaction(). If error code is zero, the operation was
// successful; if non-zero, it and the message specify the failure.
type SendResponse struct {
	ErrorCode    int32  `protobuf:"varint,1,opt,name=errorCode" json:"errorCode,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage" json:"errorMessage,omitempty"`
}

func (m *SendResponse) Reset()                    { *m = SendResponse{} }
func (m *SendResponse) String() string            { return proto.CompactTextString(m) }
func (*SendResponse) ProtoMessage()               {}
func (*SendResponse) Descriptor() ([]byte, []int) { return file_service_proto_rawDesc, []int{4} }

func (m *SendResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *SendResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

// Chainspec is a placeholder to allow specification of a particular chain fork.
type ChainSpec struct {
}

func (m *ChainSpec) Reset()                    { *m = ChainSpec{} }
func (m *ChainSpec) String() string            { return proto.CompactTextString(m) }
func (*ChainSpec) ProtoMessage()               {}
func (*ChainSpec) Descriptor() ([]byte, []int) { return file_service_proto_rawDesc, []int{5} }

// Empty is for gRPCs that take no arguments, currently only GetLightdInfo.
type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return file_service_proto_rawDesc, []int{6} }

// LightdInfo returns various information about this lightwalletd instance
// and the state of the blockchain.
type LightdInfo struct {
	Version                 string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Vendor                  string `protobuf:"bytes,2,opt,name=vendor" json:"vendor,omitempty"`
	TaddrSupport            bool   `protobuf:"varint,3,opt,name=taddrSupport" json:"taddrSupport,omitempty"`
	ChainName               string `protobuf:"bytes,4,opt,name=chainName" json:"chainName,omitempty"`
	SaplingActivationHeight uint64 `protobuf:"varint,5,opt,name=saplingActivationHeight" json:"saplingActivationHeight,omitempty"`
	ConsensusBranchId       string `protobuf:"bytes,6,opt,name=consensusBranchId" json:"consensusBranchId,omitempty"`
	BlockHeight             uint64 `protobuf:"varint,7,opt,name=blockHeight" json:"blockHeight,omitempty"`
	GitCommit               string `protobuf:"bytes,8,opt,name=gitCommit" json:"gitCommit,omitempty"`
	Branch                  string `protobuf:"bytes,9,opt,name=branch" json:"branch,omitempty"`
	BuildDate               string `protobuf:"bytes,10,opt,name=buildDate" json:"buildDate,omitempty"`
	BuildUser               string `protobuf:"bytes,11,opt,name=buildUser" json:"buildUser,omitempty"`
	EstimatedHeight         uint64 `protobuf:"varint,12,opt,name=estimatedHeight" json:"estimatedHeight,omitempty"`
	PiratedBuild            string `protobuf:"bytes,13,opt,name=piratedBuild" json:"piratedBuild,omitempty"`
	PiratedSubversion       string `protobuf:"bytes,14,opt,name=piratedSubversion" json:"piratedSubversion,omitempty"`
}

func (m *LightdInfo) Reset()                    { *m = LightdInfo{} }
func (m *LightdInfo) String() string            { return proto.CompactTextString(m) }
func (*LightdInfo) ProtoMessage()               {}
func (*LightdInfo) Descriptor() ([]byte, []int) { return file_service_proto_rawDesc, []int{7} }

func (m *LightdInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *LightdInfo) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *LightdInfo) GetTaddrSupport() bool {
	if m != nil {
		return m.TaddrSupport
	}
	return false
}

func (m *LightdInfo) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *LightdInfo) GetSaplingActivationHeight() uint64 {
	if m != nil {
		return m.SaplingActivationHeight
	}
	return 0
}

func (m *LightdInfo) GetConsensusBranchId() string {
	if m != nil {
		return m.ConsensusBranchId
	}
	return ""
}

func (m *LightdInfo) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *LightdInfo) GetGitCommit() string {
	if m != nil {
		return m.GitCommit
	}
	return ""
}

func (m *LightdInfo) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *LightdInfo) GetBuildDate() string {
	if m != nil {
		return m.BuildDate
	}
	return ""
}

func (m *LightdInfo) GetBuildUser() string {
	if m != nil {
		return m.BuildUser
	}
	return ""
}

func (m *LightdInfo) GetEstimatedHeight() uint64 {
	if m != nil {
		return m.EstimatedHeight
	}
	return 0
}

func (m *LightdInfo) GetPiratedBuild() string {
	if m != nil {
		return m.PiratedBuild
	}
	return ""
}

func (m *LightdInfo) GetPiratedSubversion() string {
	if m != nil {
		return m.PiratedSubversion
	}
	return ""
}

// TransparentAddressBlockFilter restricts the results to the given address
// or block range.
type TransparentAddressBlockFilter struct {
	Address string      `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Range   *BlockRange `protobuf:"bytes,2,opt,name=range" json:"range,omitempty"`
}

func (m *TransparentAddressBlockFilter) Reset()                    { *m = TransparentAddressBlockFilter{} }
func (m *TransparentAddressBlockFilter) String() string            { return proto.CompactTextString(m) }
func (*TransparentAddressBlockFilter) ProtoMessage()               {}
func (*TransparentAddressBlockFilter) Descriptor() ([]byte, []int) { return file_service_proto_rawDesc, []int{8} }

func (m *TransparentAddressBlockFilter) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *TransparentAddressBlockFilter) GetRange() *BlockRange {
	if m != nil {
		return m.Range
	}
	return nil
}

// Duration is currently used only for testing, so that the Ping rpc
// can simulate a delay, to create many simultaneous connections. Units
// are microseconds.
type Duration struct {
	IntervalUs int64 `protobuf:"varint,1,opt,name=intervalUs" json:"intervalUs,omitempty"`
}

func (m *Duration) Reset()                    { *m = Duration{} }
func (m *Duration) String() string            { return proto.CompactTextString(m) }
func (*Duration) ProtoMessage()               {}
func (*Duration) Descriptor() ([]byte, []int) { return file_service_proto_rawDesc, []int{9} }

func (m *Duration) GetIntervalUs() int64 {
	if m != nil {
		return m.IntervalUs
	}
	return 0
}

// PingResponse is used to indicate concurrency, how many Ping rpcs
// are executing upon entry and upon exit (after the delay).
// This rpc is used for testing only.
type PingResponse struct {
	Entry int64 `protobuf:"varint,1,opt,name=entry" json:"entry,omitempty"`
	Exit  int64 `protobuf:"varint,2,opt,name=exit" json:"exit,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return file_service_proto_rawDesc, []int{10} }

func (m *PingResponse) GetEntry() int64 {
	if m != nil {
		return m.Entry
	}
	return 0
}

func (m *PingResponse) GetExit() int64 {
	if m != nil {
		return m.Exit
	}
	return 0
}

type Address struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return file_service_proto_rawDesc, []int{11} }

func (m *Address) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type AddressList struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *AddressList) Reset()                    { *m = AddressList{} }
func (m *AddressList) String() string            { return proto.CompactTextString(m) }
func (*AddressList) ProtoMessage()               {}
func (*AddressList) Descriptor() ([]byte, []int) { return file_service_proto_rawDesc, []int{12} }

func (m *AddressList) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type Balance struct {
	ValueZat int64 `protobuf:"varint,1,opt,name=valueZat" json:"valueZat,omitempty"`
}

func (m *Balance) Reset()                    { *m = Balance{} }
func (m *Balance) String() string            { return proto.CompactTextString(m) }
func (*Balance) ProtoMessage()               {}
func (*Balance) Descriptor() ([]byte, []int) { return file_service_proto_rawDesc, []int{13} }

func (m *Balance) GetValueZat() int64 {
	if m != nil {
		return m.ValueZat
	}
	return 0
}

type Exclude struct {
	Txid [][]byte `protobuf:"bytes,1,rep,name=txid,proto3" json:"txid,omitempty"`
}

func (m *Exclude) Reset()                    { *m = Exclude{} }
func (m *Exclude) String() string            { return proto.CompactTextString(m) }
func (*Exclude) ProtoMessage()               {}
func (*Exclude) Descriptor() ([]byte, []int) { return file_service_proto_rawDesc, []int{14} }

func (m *Exclude) GetTxid() [][]byte {
	if m != nil {
		return m.Txid
	}
	return nil
}

// The TreeState is derived from the Zcash z_gettreestate rpc.
type TreeState struct {
	Network         string `protobuf:"bytes,1,opt,name=network" json:"network,omitempty"`
	Height          uint64 `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
	Hash            string `protobuf:"bytes,3,opt,name=hash" json:"hash,omitempty"`
	Time            uint32 `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
	SaplingTree     string `protobuf:"bytes,5,opt,name=saplingTree" json:"saplingTree,omitempty"`
	SaplingFrontier string `protobuf:"bytes,6,opt,name=saplingFrontier" json:"saplingFrontier,omitempty"`
	OrchardTree     string `protobuf:"bytes,7,opt,name=orchardTree" json:"orchardTree,omitempty"`
}

func (m *TreeState) Reset()                    { *m = TreeState{} }
func (m *TreeState) String() string            { return proto.CompactTextString(m) }
func (*TreeState) ProtoMessage()               {}
func (*TreeState) Descriptor() ([]byte, []int) { return file_service_proto_rawDesc, []int{15} }

func (m *TreeState) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *TreeState) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *TreeState) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *TreeState) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *TreeState) GetSaplingTree() string {
	if m != nil {
		return m.SaplingTree
	}
	return ""
}

func (m *TreeState) GetSaplingFrontier() string {
	if m != nil {
		return m.SaplingFrontier
	}
	return ""
}

func (m *TreeState) GetOrchardTree() string {
	if m != nil {
		return m.OrchardTree
	}
	return ""
}

// Results are sorted by height, which makes it easy to issue another
// request that picks up from where the previous left off.
type GetAddressUtxosArg struct {
	Addresses   []string `protobuf:"bytes,1,rep,name=addresses" json:"addresses,omitempty"`
	StartHeight uint64   `protobuf:"varint,2,opt,name=startHeight" json:"startHeight,omitempty"`
	MaxEntries  uint32   `protobuf:"varint,3,opt,name=maxEntries" json:"maxEntries,omitempty"`
}

func (m *GetAddressUtxosArg) Reset()                    { *m = GetAddressUtxosArg{} }
func (m *GetAddressUtxosArg) String() string            { return proto.CompactTextString(m) }
func (*GetAddressUtxosArg) ProtoMessage()               {}
func (*GetAddressUtxosArg) Descriptor() ([]byte, []int) { return file_service_proto_rawDesc, []int{16} }

func (m *GetAddressUtxosArg) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *GetAddressUtxosArg) GetStartHeight() uint64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *GetAddressUtxosArg) GetMaxEntries() uint32 {
	if m != nil {
		return m.MaxEntries
	}
	return 0
}

type GetAddressUtxosReply struct {
	Address  string `protobuf:"bytes,6,opt,name=address" json:"address,omitempty"`
	Txid     []byte `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Index    int32  `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Script   []byte `protobuf:"bytes,3,opt,name=script,proto3" json:"script,omitempty"`
	ValueZat int64  `protobuf:"varint,4,opt,name=valueZat" json:"valueZat,omitempty"`
	Height   uint64 `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
}

func (m *GetAddressUtxosReply) Reset()                    { *m = GetAddressUtxosReply{} }
func (m *GetAddressUtxosReply) String() string            { return proto.CompactTextString(m) }
func (*GetAddressUtxosReply) ProtoMessage()               {}
func (*GetAddressUtxosReply) Descriptor() ([]byte, []int) { return file_service_proto_rawDesc, []int{17} }

func (m *GetAddressUtxosReply) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetAddressUtxosReply) GetTxid() []byte {
	if m != nil {
		return m.Txid
	}
	return nil
}

func (m *GetAddressUtxosReply) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *GetAddressUtxosReply) GetScript() []byte {
	if m != nil {
		return m.Script
	}
	return nil
}

func (m *GetAddressUtxosReply) GetValueZat() int64 {
	if m != nil {
		return m.ValueZat
	}
	return 0
}

func (m *GetAddressUtxosReply) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type GetAddressUtxosReplyList struct {
	AddressUtxos []*GetAddressUtxosReply `protobuf:"bytes,1,rep,name=addressUtxos" json:"addressUtxos,omitempty"`
}

func (m *GetAddressUtxosReplyList) Reset()                    { *m = GetAddressUtxosReplyList{} }
func (m *GetAddressUtxosReplyList) String() string            { return proto.CompactTextString(m) }
func (*GetAddressUtxosReplyList) ProtoMessage()               {}
func (*GetAddressUtxosReplyList) Descriptor() ([]byte, []int) { return file_service_proto_rawDesc, []int{18} }

func (m *GetAddressUtxosReplyList) GetAddressUtxos() []*GetAddressUtxosReply {
	if m != nil {
		return m.AddressUtxos
	}
	return nil
}

type PriceRequest struct {
	// List of timestamps(in sec) at which the price is being requested
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	// 3 letter currency-code
	Currency string `protobuf:"bytes,2,opt,name=currency" json:"currency,omitempty"`
}

func (m *PriceRequest) Reset()                    { *m = PriceRequest{} }
func (m *PriceRequest) String() string            { return proto.CompactTextString(m) }
func (*PriceRequest) ProtoMessage()               {}
func (*PriceRequest) Descriptor() ([]byte, []int) { return file_service_proto_rawDesc, []int{19} }

func (m *PriceRequest) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *PriceRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

type PriceResponse struct {
	// Timestamp at which this price quote was fetched. Note, this may not be the same
	// as the request timestamp, but the server will respond with the closest timestamp that it has/can fetch
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	// 3-letter currency code, matching the request
	Currency string `protobuf:"bytes,2,opt,name=currency" json:"currency,omitempty"`
	// price of Arrr
	Price float64 `protobuf:"fixed64,3,opt,name=price" json:"price,omitempty"`
}

func (m *PriceResponse) Reset()                    { *m = PriceResponse{} }
func (m *PriceResponse) String() string            { return proto.CompactTextString(m) }
func (*PriceResponse) ProtoMessage()               {}
func (*PriceResponse) Descriptor() ([]byte, []int) { return file_service_proto_rawDesc, []int{20} }

func (m *PriceResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *PriceResponse) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *PriceResponse) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func init() {
	proto.RegisterType((*BlockID)(nil), "pirate.wallet.sdk.rpc.BlockID")
	proto.RegisterType((*BlockRange)(nil), "pirate.wallet.sdk.rpc.BlockRange")
	proto.RegisterType((*TxFilter)(nil), "pirate.wallet.sdk.rpc.TxFilter")
	proto.RegisterType((*RawTransaction)(nil), "pirate.wallet.sdk.rpc.RawTransaction")
	proto.RegisterType((*SendResponse)(nil), "pirate.wallet.sdk.rpc.SendResponse")
	proto.RegisterType((*ChainSpec)(nil), "pirate.wallet.sdk.rpc.ChainSpec")
	proto.RegisterType((*Empty)(nil), "pirate.wallet.sdk.rpc.Empty")
	proto.RegisterType((*LightdInfo)(nil), "pirate.wallet.sdk.rpc.LightdInfo")
	proto.RegisterType((*TransparentAddressBlockFilter)(nil), "pirate.wallet.sdk.rpc.TransparentAddressBlockFilter")
	proto.RegisterType((*Duration)(nil), "pirate.wallet.sdk.rpc.Duration")
	proto.RegisterType((*PingResponse)(nil), "pirate.wallet.sdk.rpc.PingResponse")
	proto.RegisterType((*Address)(nil), "pirate.wallet.sdk.rpc.Address")
	proto.RegisterType((*AddressList)(nil), "pirate.wallet.sdk.rpc.AddressList")
	proto.RegisterType((*Balance)(nil), "pirate.wallet.sdk.rpc.Balance")
	proto.RegisterType((*Exclude)(nil), "pirate.wallet.sdk.rpc.Exclude")
	proto.RegisterType((*TreeState)(nil), "pirate.wallet.sdk.rpc.TreeState")
	proto.RegisterType((*GetAddressUtxosArg)(nil), "pirate.wallet.sdk.rpc.GetAddressUtxosArg")
	proto.RegisterType((*GetAddressUtxosReply)(nil), "pirate.wallet.sdk.rpc.GetAddressUtxosReply")
	proto.RegisterType((*GetAddressUtxosReplyList)(nil), "pirate.wallet.sdk.rpc.GetAddressUtxosReplyList")
	proto.RegisterType((*PriceRequest)(nil), "pirate.wallet.sdk.rpc.PriceRequest")
	proto.RegisterType((*PriceResponse)(nil), "pirate.wallet.sdk.rpc.PriceResponse")
}

func init() { proto.RegisterFile("service.proto", file_service_proto_rawDesc) }

var file_service_proto_rawDesc = []byte{
	// 1301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0x5f, 0x6f, 0x13, 0x47,
	0x10, 0xb7, 0x49, 0x1c, 0xc7, 0x13, 0x9b, 0x3f, 0x5b, 0xfe, 0x58, 0x2e, 0xd0, 0x74, 0x29, 0x52,
	0x5a, 0xaa, 0x80, 0x28, 0x55, 0x79, 0xe8, 0x4b, 0x12, 0x20, 0x20, 0x01, 0xa5, 0x1b, 0xa3, 0x4a,
	0x41, 0x2a, 0xda, 0xdc, 0x0d, 0xf6, 0x36, 0xe7, 0xbb, 0xeb, 0xee, 0x3a, 0x38, 0x5f, 0xa8, 0xaf,
	0x7d, 0xef, 0xd7, 0xe8, 0x97, 0xe9, 0x63, 0xb5, 0xb3, 0x6b, 0xfb, 0x1c, 0x38, 0xdb, 0x79, 0xf2,
	0xcd, 0xec, 0xcc, 0x6f, 0x66, 0xe7, 0xef, 0x1a, 0x5a, 0x06, 0xf5, 0x89, 0x8a, 0x70, 0x3b, 0xd7,
	0x99, 0xcd, 0xd8, 0xb5, 0x5c, 0x69, 0x69, 0x71, 0xfb, 0xa3, 0x4c, 0x12, 0xb4, 0xdb, 0x26, 0x3e,
	0xde, 0xd6, 0x79, 0xd4, 0xb9, 0x16, 0x65, 0x83, 0x5c, 0x46, 0xf6, 0xfd, 0x87, 0x4c, 0x0f, 0xa4,
	0x35, 0x5e, 0x9a, 0xff, 0x08, 0xf5, 0xdd, 0x24, 0x8b, 0x8e, 0x5f, 0x3c, 0x61, 0xd7, 0x61, 0xad,
	0x8f, 0xaa, 0xd7, 0xb7, 0xed, 0xea, 0x66, 0x75, 0x6b, 0x55, 0x04, 0x8a, 0x31, 0x58, 0xed, 0x4b,
	0xd3, 0x6f, 0x5f, 0xd8, 0xac, 0x6e, 0x35, 0x05, 0x7d, 0x73, 0x0b, 0x40, 0x6a, 0x42, 0xa6, 0x3d,
	0x64, 0x8f, 0xa0, 0x66, 0xac, 0xd4, 0x5e, 0x71, 0xe3, 0xe1, 0xed, 0xed, 0xcf, 0xba, 0xb0, 0x1d,
	0x0c, 0x09, 0x2f, 0xcc, 0x1e, 0xc0, 0x0a, 0xa6, 0x31, 0xc1, 0x2e, 0xd6, 0x71, 0xa2, 0xfc, 0x0f,
	0x58, 0xef, 0x8e, 0x9e, 0xa9, 0xc4, 0xa2, 0x76, 0x36, 0x8f, 0xdc, 0xd9, 0xb2, 0x36, 0x49, 0x98,
	0x5d, 0x85, 0x9a, 0x4a, 0x63, 0x1c, 0x91, 0xd5, 0x55, 0xe1, 0x89, 0xc9, 0x0d, 0x57, 0x0a, 0x37,
	0xfc, 0x19, 0x2e, 0x0a, 0xf9, 0xb1, 0xab, 0x65, 0x6a, 0x64, 0x64, 0x55, 0x96, 0x3a, 0xa9, 0x58,
	0x5a, 0x49, 0x06, 0x9b, 0x82, 0xbe, 0x0b, 0x31, 0xbb, 0x50, 0x8c, 0x19, 0x7f, 0x03, 0xcd, 0x03,
	0x4c, 0x63, 0x81, 0x26, 0xcf, 0x52, 0x83, 0xec, 0x26, 0x34, 0x50, 0xeb, 0x4c, 0xef, 0x65, 0x31,
	0x12, 0x40, 0x4d, 0x4c, 0x19, 0x8c, 0x43, 0x93, 0x88, 0x57, 0x68, 0x8c, 0xec, 0x21, 0x61, 0x35,
	0xc4, 0x0c, 0x8f, 0x6f, 0x40, 0x63, 0xaf, 0x2f, 0x55, 0x7a, 0x90, 0x63, 0xc4, 0xeb, 0x50, 0x7b,
	0x3a, 0xc8, 0xed, 0x29, 0xff, 0x6f, 0x05, 0xe0, 0xa5, 0xb3, 0x18, 0xbf, 0x48, 0x3f, 0x64, 0xac,
	0x0d, 0xf5, 0x13, 0xd4, 0x46, 0x65, 0x29, 0x19, 0x69, 0x88, 0x31, 0xe9, 0x1c, 0x3d, 0xc1, 0x34,
	0xce, 0x74, 0x00, 0x0f, 0x94, 0x33, 0x6d, 0x65, 0x1c, 0xeb, 0x83, 0x61, 0x9e, 0x67, 0xda, 0x52,
	0x08, 0xd6, 0xc5, 0x0c, 0xcf, 0x39, 0x1f, 0x39, 0xd3, 0xaf, 0xe5, 0x00, 0xdb, 0xab, 0xa4, 0x3e,
	0x65, 0xb0, 0xc7, 0x70, 0xc3, 0xc8, 0x3c, 0x51, 0x69, 0x6f, 0x27, 0xb2, 0xea, 0x44, 0xba, 0x58,
	0x3d, 0xf7, 0x31, 0xa9, 0x51, 0x4c, 0xca, 0x8e, 0xd9, 0xf7, 0x70, 0x25, 0x72, 0xd1, 0x49, 0xcd,
	0xd0, 0xec, 0x6a, 0x99, 0x46, 0xfd, 0x17, 0x71, 0x7b, 0x8d, 0xf0, 0x3f, 0x3d, 0x60, 0x9b, 0xb0,
	0x41, 0x39, 0x0c, 0xd8, 0x75, 0xc2, 0x2e, 0xb2, 0x9c, 0x9f, 0x3d, 0x65, 0xf7, 0xb2, 0xc1, 0x40,
	0xd9, 0xf6, 0xba, 0xf7, 0x73, 0xc2, 0x70, 0x11, 0x38, 0x22, 0xac, 0x76, 0xc3, 0x47, 0xc0, 0x53,
	0x4e, 0xeb, 0x68, 0xa8, 0x92, 0xf8, 0x89, 0xb4, 0xd8, 0x06, 0xaf, 0x35, 0x61, 0x4c, 0x4e, 0xdf,
	0x1a, 0xd4, 0xed, 0x8d, 0xc2, 0xa9, 0x63, 0xb0, 0x2d, 0xb8, 0x84, 0xc6, 0xaa, 0x81, 0xb4, 0x18,
	0x07, 0xbf, 0x9a, 0xe4, 0xd7, 0x59, 0xb6, 0x8b, 0xb3, 0x2f, 0xd0, 0x78, 0xd7, 0x69, 0xb7, 0x5b,
	0x3e, 0xc5, 0x45, 0x9e, 0x8b, 0x47, 0xa0, 0x0f, 0x86, 0x47, 0xe3, 0x3c, 0x5e, 0xf4, 0xf1, 0xf8,
	0xe4, 0x80, 0x6b, 0xb8, 0x45, 0xd5, 0x99, 0x4b, 0x8d, 0xa9, 0xdd, 0x89, 0x63, 0x8d, 0xc6, 0x50,
	0xb9, 0x87, 0x0e, 0x69, 0x43, 0x5d, 0x7a, 0xee, 0xb8, 0x18, 0x02, 0xc9, 0x7e, 0x82, 0x9a, 0x76,
	0x8d, 0x1b, 0x7a, 0xef, 0xeb, 0x79, 0xbd, 0x43, 0x1d, 0x2e, 0xbc, 0x3c, 0xff, 0x0e, 0xd6, 0x9f,
	0x0c, 0x35, 0xe5, 0x90, 0xdd, 0x06, 0x50, 0xa9, 0x45, 0x7d, 0x22, 0x93, 0xb7, 0xde, 0xc2, 0x8a,
	0x28, 0x70, 0xf8, 0x63, 0x68, 0xbe, 0x51, 0x69, 0x6f, 0xd2, 0x02, 0x57, 0xa1, 0x86, 0xa9, 0xd5,
	0xa7, 0x41, 0xd4, 0x13, 0xae, 0xa9, 0x70, 0xa4, 0x7c, 0xfb, 0xac, 0x08, 0xfa, 0xe6, 0x77, 0xa0,
	0x1e, 0xae, 0x53, 0x7e, 0x07, 0x7e, 0x0f, 0x36, 0x82, 0xd0, 0x4b, 0x65, 0x28, 0xf7, 0xe1, 0x04,
	0x9d, 0xe8, 0x8a, 0xcb, 0xd3, 0x84, 0xc1, 0xef, 0x42, 0x7d, 0x57, 0x26, 0x32, 0x8d, 0x90, 0x75,
	0x60, 0xfd, 0x44, 0x26, 0x43, 0x3c, 0x94, 0x36, 0x78, 0x32, 0xa1, 0xf9, 0x2d, 0xa8, 0x3f, 0x1d,
	0x45, 0xc9, 0x30, 0x46, 0xe7, 0x97, 0x1d, 0xa9, 0x98, 0xa0, 0x9a, 0x82, 0xbe, 0xf9, 0xbf, 0x55,
	0x68, 0x74, 0x35, 0xe2, 0x81, 0x75, 0x95, 0xd1, 0x86, 0x7a, 0x8a, 0xf6, 0x63, 0xa6, 0x8f, 0xc7,
	0xae, 0x05, 0xb2, 0x6c, 0x28, 0xcc, 0x8c, 0x99, 0x86, 0x1f, 0x33, 0x64, 0x47, 0x85, 0xb6, 0x6a,
	0x09, 0xfa, 0x76, 0x95, 0x1e, 0x5a, 0xc6, 0x59, 0xa3, 0x2e, 0x6a, 0x88, 0x22, 0xcb, 0xd5, 0x5d,
	0x20, 0x9f, 0xe9, 0x2c, 0xb5, 0x0a, 0x75, 0xe8, 0x9b, 0xb3, 0x6c, 0x87, 0x95, 0xe9, 0xa8, 0x2f,
	0x75, 0x4c, 0x58, 0x75, 0x8f, 0x55, 0x60, 0x71, 0x0b, 0x6c, 0x1f, 0xc7, 0xf5, 0xf3, 0xd6, 0x8e,
	0x32, 0xb3, 0xa3, 0x7b, 0xf3, 0xe3, 0x49, 0x1e, 0xba, 0x19, 0xfe, 0xbc, 0x78, 0xcd, 0x22, 0xcb,
	0x55, 0xc7, 0x40, 0x8e, 0x9e, 0xa6, 0x56, 0x2b, 0x34, 0x74, 0xe3, 0x96, 0x28, 0x70, 0xf8, 0x5f,
	0x55, 0xb8, 0x7a, 0xc6, 0xac, 0xc0, 0x3c, 0x39, 0x2d, 0x66, 0x7c, 0x6d, 0xb6, 0x6a, 0xa7, 0x29,
	0xa9, 0x8e, 0x53, 0x32, 0x3b, 0xcf, 0x6b, 0xe3, 0x79, 0x7e, 0x1d, 0xd6, 0x4c, 0xa4, 0x55, 0x6e,
	0xc3, 0x44, 0x0f, 0xd4, 0x4c, 0xee, 0x57, 0x67, 0x73, 0x5f, 0x48, 0x5a, 0x6d, 0x66, 0x92, 0x1f,
	0x43, 0xfb, 0x73, 0x7e, 0x52, 0xd1, 0xfd, 0x02, 0x4d, 0x59, 0x38, 0xa0, 0x38, 0x6d, 0x3c, 0xbc,
	0x57, 0xd2, 0x4e, 0x9f, 0x83, 0x11, 0x33, 0x00, 0xfc, 0x39, 0x34, 0xdf, 0x68, 0x15, 0xa1, 0xc0,
	0x3f, 0x87, 0xe8, 0xab, 0xda, 0x55, 0x84, 0xb1, 0x72, 0x90, 0x87, 0xad, 0x3c, 0x65, 0xb8, 0xeb,
	0x44, 0x43, 0xad, 0x31, 0x8d, 0x4e, 0xc3, 0x54, 0x9f, 0xd0, 0xfc, 0x3d, 0xb4, 0x02, 0xd2, 0x74,
	0x03, 0xcd, 0x42, 0xad, 0x2c, 0x09, 0xe5, 0x62, 0x9c, 0x3b, 0x28, 0x0a, 0x66, 0x55, 0x78, 0xe2,
	0xe1, 0xdf, 0x2d, 0xb8, 0xb2, 0xe7, 0x9f, 0x14, 0xdd, 0xd1, 0x81, 0xd5, 0x28, 0x07, 0xa8, 0xd9,
	0x3b, 0xb8, 0xb1, 0x8f, 0xf6, 0xa5, 0xb2, 0xf8, 0x1b, 0x5d, 0x9e, 0x46, 0xc8, 0xbe, 0xce, 0x86,
	0x39, 0x5b, 0xb0, 0xa1, 0x3b, 0x0b, 0xce, 0x79, 0x85, 0x75, 0xe1, 0xa2, 0x03, 0x97, 0x16, 0x8d,
	0x07, 0x66, 0x9b, 0x25, 0x3a, 0x93, 0x4d, 0xb9, 0x04, 0xea, 0xaf, 0xb0, 0xbe, 0x1f, 0x1c, 0x5d,
	0xe8, 0xe3, 0x9d, 0x32, 0x7b, 0x3e, 0x10, 0x24, 0xc6, 0x2b, 0xec, 0x1d, 0xb4, 0xc6, 0x90, 0xfe,
	0x81, 0xb4, 0x78, 0xc2, 0x2e, 0x09, 0xfd, 0xa0, 0xca, 0xde, 0x41, 0xd3, 0x55, 0x92, 0x10, 0x82,
	0x12, 0xcc, 0xca, 0x14, 0x8b, 0x85, 0xd4, 0xf9, 0x66, 0xbe, 0x90, 0xaf, 0x11, 0xf2, 0xfc, 0x8b,
	0x7d, 0xb4, 0x7b, 0x94, 0xfa, 0x82, 0x8d, 0x9b, 0x25, 0xea, 0xf4, 0x08, 0x59, 0x1a, 0xfc, 0x90,
	0xf2, 0x57, 0x7c, 0x52, 0x7d, 0x55, 0xa2, 0x39, 0x7e, 0xe5, 0x75, 0xee, 0x96, 0x08, 0xcc, 0x3e,
	0xcd, 0x78, 0x85, 0xbd, 0x87, 0x4b, 0xee, 0xc1, 0x55, 0x04, 0x5f, 0x4e, 0xb7, 0x34, 0xf0, 0xc5,
	0xf7, 0x1b, 0xaf, 0x30, 0x03, 0x97, 0x9d, 0xf3, 0xa1, 0x5d, 0xbb, 0x23, 0x15, 0x1b, 0xf6, 0xa8,
	0xcc, 0xfd, 0x79, 0x7b, 0x79, 0xe9, 0x3b, 0x3d, 0xa8, 0xb2, 0x43, 0x9a, 0xcd, 0x63, 0xa3, 0xe3,
	0x15, 0xc6, 0x4b, 0x00, 0x0a, 0xfb, 0xb0, 0xbc, 0xee, 0x3d, 0x06, 0xaf, 0xb0, 0xdf, 0x69, 0xb0,
	0x9d, 0xc1, 0xf6, 0x8d, 0x5c, 0xda, 0x07, 0xc1, 0xc2, 0x62, 0xf4, 0xad, 0x2a, 0xeb, 0x52, 0x9d,
	0xbe, 0xc2, 0x41, 0x9e, 0x65, 0x49, 0x77, 0x54, 0x8a, 0x19, 0x36, 0x6e, 0x67, 0x73, 0x7e, 0x03,
	0x74, 0x47, 0xa1, 0xfa, 0x2f, 0x4f, 0x51, 0x83, 0xb7, 0xf3, 0xab, 0xf3, 0x1c, 0xe1, 0x16, 0xe4,
	0xf2, 0x74, 0xc5, 0x2f, 0x1a, 0x07, 0x9b, 0xa5, 0xf9, 0x0f, 0x08, 0xbc, 0xc2, 0x32, 0xb8, 0x74,
	0x66, 0xf0, 0xb3, 0x6f, 0x97, 0x5b, 0x10, 0x3b, 0xba, 0xd7, 0xb9, 0x7f, 0x8e, 0x5d, 0xe2, 0xf2,
	0x4e, 0x85, 0x7a, 0xed, 0xcc, 0x69, 0x08, 0xd3, 0x39, 0xcc, 0x9e, 0x67, 0x85, 0x85, 0xc8, 0xb5,
	0x68, 0xee, 0x4f, 0xfe, 0x89, 0xcc, 0xcf, 0x49, 0xd9, 0x3c, 0x9c, 0x02, 0xf0, 0x0a, 0x7b, 0x0d,
	0xab, 0xee, 0x01, 0x59, 0x3a, 0x24, 0xc6, 0x2f, 0xd1, 0xd2, 0x0e, 0x2e, 0x3e, 0x3f, 0x79, 0x65,
	0xf7, 0xcb, 0xc3, 0xeb, 0x89, 0xc3, 0xf7, 0x52, 0xf1, 0x7d, 0xff, 0xab, 0xf3, 0xe8, 0x9f, 0x0b,
	0x95, 0xa3, 0x35, 0xfa, 0x3b, 0xfc, 0xc3, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x0b, 0x90,
	0xcb, 0x4d, 0x0f, 0x00, 0x00,
}
