// Copyright (c) 2019-2020 The Zcash developers
// Copyright (c) 2019-2021 Pirate Chain developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or https://www.opensource.org/licenses/mit-license.php .

// Code generated by protoc-gen-go. DO NOT EDIT.
// 	protoc-gen-go 	v1.28.0
//  protoc 					v3.21.9
// source: darkside.proto

/*
Package walletrpc is a generated protocol buffer package.

It is generated from these files:
	darkside.proto

It has these top-level messages:
	DarksideMetaState
	DarksideBlock
	DarksideBlocksURL
	DarksideTransactionsURL
	DarksideHeight
	DarksideEmptyBlocks
*/
package walletrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DarksideMetaState struct {
	SaplingActivation int32  `protobuf:"varint,1,opt,name=saplingActivation" json:"saplingActivation,omitempty"`
	BranchID          string `protobuf:"bytes,2,opt,name=branchID" json:"branchID,omitempty"`
	ChainName         string `protobuf:"bytes,3,opt,name=chainName" json:"chainName,omitempty"`
}

func (m *DarksideMetaState) Reset()                    { *m = DarksideMetaState{} }
func (m *DarksideMetaState) String() string            { return proto.CompactTextString(m) }
func (*DarksideMetaState) ProtoMessage()               {}
func (*DarksideMetaState) Descriptor() ([]byte, []int) { return file_darkside_proto_rawDesc, []int{0} }

func (m *DarksideMetaState) GetSaplingActivation() int32 {
	if m != nil {
		return m.SaplingActivation
	}
	return 0
}

func (m *DarksideMetaState) GetBranchID() string {
	if m != nil {
		return m.BranchID
	}
	return ""
}

func (m *DarksideMetaState) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

// A block is a hex-encoded string.
type DarksideBlock struct {
	Block string `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
}

func (m *DarksideBlock) Reset()                    { *m = DarksideBlock{} }
func (m *DarksideBlock) String() string            { return proto.CompactTextString(m) }
func (*DarksideBlock) ProtoMessage()               {}
func (*DarksideBlock) Descriptor() ([]byte, []int) { return file_darkside_proto_rawDesc, []int{1} }

func (m *DarksideBlock) GetBlock() string {
	if m != nil {
		return m.Block
	}
	return ""
}

// DarksideBlocksURL is typically something like:
// https://raw.githubusercontent.com/zcash-hackworks/darksidewalletd-test-data/master/basic-reorg/before-reorg.txt
type DarksideBlocksURL struct {
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
}

func (m *DarksideBlocksURL) Reset()                    { *m = DarksideBlocksURL{} }
func (m *DarksideBlocksURL) String() string            { return proto.CompactTextString(m) }
func (*DarksideBlocksURL) ProtoMessage()               {}
func (*DarksideBlocksURL) Descriptor() ([]byte, []int) { return file_darkside_proto_rawDesc, []int{2} }

func (m *DarksideBlocksURL) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// DarksideTransactionsURL refers to an HTTP source that contains a list
// of hex-encoded transactions, one per line, that are to be associated
// with the given height (fake-mined into the block at that height)
type DarksideTransactionsURL struct {
	Height int32  `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Url    string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
}

func (m *DarksideTransactionsURL) Reset()                    { *m = DarksideTransactionsURL{} }
func (m *DarksideTransactionsURL) String() string            { return proto.CompactTextString(m) }
func (*DarksideTransactionsURL) ProtoMessage()               {}
func (*DarksideTransactionsURL) Descriptor() ([]byte, []int) { return file_darkside_proto_rawDesc, []int{3} }

func (m *DarksideTransactionsURL) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *DarksideTransactionsURL) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type DarksideHeight struct {
	Height int32 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
}

func (m *DarksideHeight) Reset()                    { *m = DarksideHeight{} }
func (m *DarksideHeight) String() string            { return proto.CompactTextString(m) }
func (*DarksideHeight) ProtoMessage()               {}
func (*DarksideHeight) Descriptor() ([]byte, []int) { return file_darkside_proto_rawDesc, []int{4} }

func (m *DarksideHeight) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type DarksideEmptyBlocks struct {
	Height int32 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Nonce  int32 `protobuf:"varint,2,opt,name=nonce" json:"nonce,omitempty"`
	Count  int32 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (m *DarksideEmptyBlocks) Reset()                    { *m = DarksideEmptyBlocks{} }
func (m *DarksideEmptyBlocks) String() string            { return proto.CompactTextString(m) }
func (*DarksideEmptyBlocks) ProtoMessage()               {}
func (*DarksideEmptyBlocks) Descriptor() ([]byte, []int) { return file_darkside_proto_rawDesc, []int{5} }

func (m *DarksideEmptyBlocks) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *DarksideEmptyBlocks) GetNonce() int32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *DarksideEmptyBlocks) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*DarksideMetaState)(nil), "cash.z.wallet.sdk.rpc.DarksideMetaState")
	proto.RegisterType((*DarksideBlock)(nil), "cash.z.wallet.sdk.rpc.DarksideBlock")
	proto.RegisterType((*DarksideBlocksURL)(nil), "cash.z.wallet.sdk.rpc.DarksideBlocksURL")
	proto.RegisterType((*DarksideTransactionsURL)(nil), "cash.z.wallet.sdk.rpc.DarksideTransactionsURL")
	proto.RegisterType((*DarksideHeight)(nil), "cash.z.wallet.sdk.rpc.DarksideHeight")
	proto.RegisterType((*DarksideEmptyBlocks)(nil), "cash.z.wallet.sdk.rpc.DarksideEmptyBlocks")
}

func init() { proto.RegisterFile("darkside.proto", file_darkside_proto_rawDesc) }

var file_darkside_proto_rawDesc = []byte{
	// 513 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xed, 0x6e, 0xd3, 0x30,
	0x14, 0x6d, 0x3a, 0x65, 0x5a, 0xef, 0xb4, 0xaa, 0x35, 0x63, 0x2b, 0x65, 0x3f, 0xa6, 0x88, 0x4a,
	0x11, 0xa0, 0x80, 0xe0, 0x09, 0xba, 0x0e, 0x8d, 0x49, 0x80, 0x20, 0xdd, 0x84, 0x06, 0x42, 0xc8,
	0x75, 0xae, 0xda, 0xa8, 0xa9, 0x63, 0xd9, 0xde, 0xc6, 0xc4, 0x23, 0xf0, 0x46, 0x3c, 0x1d, 0x8a,
	0x93, 0xac, 0x29, 0x23, 0xb8, 0x82, 0x5f, 0xf1, 0xb5, 0xcf, 0x3d, 0xe7, 0xdc, 0x0f, 0x05, 0xda,
	0x11, 0x95, 0x73, 0x15, 0x47, 0x18, 0x08, 0x99, 0xea, 0x94, 0xdc, 0x17, 0xb1, 0xa4, 0x1a, 0x83,
	0x6b, 0x9a, 0x24, 0xa8, 0x03, 0x15, 0xcd, 0x03, 0x29, 0x58, 0x7f, 0x47, 0xa1, 0xbc, 0x8a, 0x59,
	0x81, 0xf2, 0xbe, 0x43, 0xf7, 0xb8, 0xc8, 0x7b, 0x8b, 0x9a, 0x8e, 0x35, 0xd5, 0x48, 0x9e, 0x42,
	0x57, 0x51, 0x91, 0xc4, 0x7c, 0x3a, 0x64, 0x3a, 0xbe, 0xa2, 0x3a, 0x4e, 0x79, 0xcf, 0x39, 0x74,
	0x7c, 0x37, 0xbc, 0xfb, 0x40, 0xfa, 0xb0, 0x35, 0x91, 0x94, 0xb3, 0xd9, 0xe9, 0x71, 0xaf, 0x79,
	0xe8, 0xf8, 0xad, 0xf0, 0x36, 0x26, 0x07, 0xd0, 0x62, 0x33, 0x1a, 0xf3, 0x77, 0x74, 0x81, 0xbd,
	0x0d, 0xf3, 0xb8, 0xbc, 0xf0, 0x06, 0xb0, 0x53, 0x8a, 0x1f, 0x25, 0x29, 0x9b, 0x93, 0x5d, 0x70,
	0x27, 0xd9, 0xc1, 0x88, 0xb5, 0xc2, 0x3c, 0xf0, 0x06, 0x4b, 0x8f, 0x06, 0xa6, 0xce, 0xc3, 0x37,
	0xa4, 0x03, 0x1b, 0x97, 0x32, 0x29, 0x80, 0xd9, 0xd1, 0x1b, 0xc1, 0x7e, 0x09, 0x3b, 0x93, 0x94,
	0x2b, 0xca, 0x32, 0x7b, 0x06, 0xbc, 0x07, 0x9b, 0x33, 0x8c, 0xa7, 0x33, 0x5d, 0x54, 0x51, 0x44,
	0x25, 0x49, 0x73, 0x49, 0xe2, 0x43, 0xbb, 0x24, 0x79, 0x9d, 0x63, 0x6a, 0x72, 0xbd, 0x0b, 0xb8,
	0x57, 0x22, 0x5f, 0x2d, 0x84, 0xbe, 0xc9, 0xad, 0xd5, 0x4a, 0xed, 0x82, 0xcb, 0x53, 0xce, 0xd0,
	0x88, 0xb9, 0x61, 0x1e, 0x64, 0xb7, 0x2c, 0xbd, 0xe4, 0xda, 0xf4, 0xc6, 0x0d, 0xf3, 0xe0, 0xc5,
	0x8f, 0x2d, 0xe8, 0x94, 0xdc, 0x63, 0x2d, 0x91, 0x2e, 0x50, 0x92, 0x0f, 0xe0, 0x86, 0xa8, 0x50,
	0x13, 0x3f, 0xf8, 0xe3, 0x64, 0x83, 0x3b, 0x73, 0xec, 0x1f, 0xd4, 0x20, 0x8d, 0x5f, 0xaf, 0x41,
	0x3e, 0x43, 0x77, 0xac, 0xe9, 0xb4, 0xe8, 0x6a, 0xae, 0x44, 0x1e, 0x59, 0xe8, 0x0d, 0xd8, 0x46,
	0xed, 0x3b, 0xe4, 0x23, 0x6c, 0x57, 0xc8, 0xad, 0xae, 0x6f, 0x27, 0x6b, 0x75, 0xfd, 0x75, 0xc5,
	0xf5, 0x48, 0x62, 0xb6, 0xb2, 0x8f, 0x2d, 0xf4, 0x95, 0x11, 0x59, 0x05, 0x26, 0xb0, 0x6f, 0x04,
	0xaa, 0x5b, 0x54, 0x34, 0x67, 0x50, 0x93, 0x1a, 0xd2, 0xeb, 0x0a, 0x7a, 0x8d, 0xee, 0xb0, 0xa2,
	0x88, 0xaa, 0x06, 0x09, 0x2c, 0x45, 0xfc, 0xb6, 0xd6, 0xd6, 0x42, 0xce, 0x60, 0x7b, 0x28, 0x44,
	0x72, 0x63, 0x94, 0xa2, 0x5a, 0xf3, 0xab, 0x0b, 0xbf, 0x4e, 0x7b, 0x4e, 0x50, 0x9f, 0x72, 0x96,
	0x2e, 0x62, 0x3e, 0x5d, 0x29, 0xe0, 0xaf, 0xa9, 0xfd, 0xf5, 0x9a, 0xe7, 0x35, 0x9e, 0x3b, 0xe4,
	0x02, 0x1e, 0x8c, 0x12, 0xa4, 0xf2, 0x1f, 0x54, 0x6c, 0xf6, 0xbf, 0x40, 0x7b, 0x18, 0x45, 0xc3,
	0x28, 0x92, 0xa8, 0xd4, 0xb9, 0xfe, 0x96, 0x92, 0x27, 0x35, 0x19, 0x27, 0xa8, 0x2b, 0x30, 0x15,
	0xa2, 0x48, 0xec, 0xf4, 0xef, 0xa1, 0x63, 0x9c, 0x57, 0x05, 0xfe, 0xcb, 0xf0, 0xd1, 0xc3, 0x4f,
	0x7b, 0x49, 0x36, 0x98, 0xfc, 0x39, 0x7a, 0x96, 0x7f, 0xa5, 0x60, 0x3f, 0x9b, 0x8d, 0xc9, 0xa6,
	0xf9, 0x8d, 0xbf, 0xfc, 0x15, 0x00, 0x00, 0xff, 0xff, 0x8d, 0x65, 0x96, 0x68, 0xfe, 0x05, 0x00,
	0x00,
}
