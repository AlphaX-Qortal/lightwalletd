// Copyright (c) 2019-2020 The Zcash developers
// Copyright (c) 2019-2021 Pirate Chain developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or https://www.opensource.org/licenses/mit-license.php .

// Code generated by protoc-gen-go. DO NOT EDIT.
// 	protoc-gen-go 	v1.28.0
//  protoc 					v3.21.9
// source: compact_formats.proto

/*
Package walletrpc is a generated protocol buffer package.

It is generated from these files:
	compact_formats.proto

It has these top-level messages:
	CompactBlock
	CompactTx
	CompactSaplingSpend
	CompactSaplingOutput
	CompactOrchardAction
*/
package walletrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// CompactBlock is a packaging of ONLY the data from a block that's needed to:
//   1. Detect a payment to your shielded Sapling address
//   2. Detect a spend of your shielded Sapling notes
//   3. Update your witnesses to generate new Sapling spend proofs.
type CompactBlock struct {
	ProtoVersion uint32       `protobuf:"varint,1,opt,name=protoVersion" json:"protoVersion,omitempty"`
	Height       uint64       `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
	Hash         []byte       `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	PrevHash     []byte       `protobuf:"bytes,4,opt,name=prevHash,proto3" json:"prevHash,omitempty"`
	Time         uint32       `protobuf:"varint,5,opt,name=time" json:"time,omitempty"`
	Header       []byte       `protobuf:"bytes,6,opt,name=header,proto3" json:"header,omitempty"`
	Vtx          []*CompactTx `protobuf:"bytes,7,rep,name=vtx" json:"vtx,omitempty"`
}

func (m *CompactBlock) Reset()                    { *m = CompactBlock{} }
func (m *CompactBlock) String() string            { return proto.CompactTextString(m) }
func (*CompactBlock) ProtoMessage()               {}
func (*CompactBlock) Descriptor() ([]byte, []int) { return file_compact_formats_proto_rawDesc, []int{0} }

func (m *CompactBlock) GetProtoVersion() uint32 {
	if m != nil {
		return m.ProtoVersion
	}
	return 0
}

func (m *CompactBlock) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *CompactBlock) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *CompactBlock) GetPrevHash() []byte {
	if m != nil {
		return m.PrevHash
	}
	return nil
}

func (m *CompactBlock) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *CompactBlock) GetHeader() []byte {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CompactBlock) GetVtx() []*CompactTx {
	if m != nil {
		return m.Vtx
	}
	return nil
}

// CompactTx contains the minimum information for a wallet to know if this transaction
// is relevant to it (either pays to it or spends from it) via shielded elements
// only. This message will not encode a transparent-to-transparent transaction.
type CompactTx struct {
	Index uint64 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Hash  []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// The transaction fee: present if server can provide. In the case of a
	// stateless server and a transaction with transparent inputs, this will be
	// unset because the calculation requires reference to prior transactions.
	// in a pure-Sapling context, the fee will be calculable as:
	//    valueBalance + (sum(vPubNew) - sum(vPubOld) - sum(tOut))
	Fee     uint32                  `protobuf:"varint,3,opt,name=fee" json:"fee,omitempty"`
	Spends  []*CompactSaplingSpend  `protobuf:"bytes,4,rep,name=spends" json:"spends,omitempty"`
	Outputs []*CompactSaplingOutput `protobuf:"bytes,5,rep,name=outputs" json:"outputs,omitempty"`
	Actions []*CompactOrchardAction `protobuf:"bytes,6,rep,name=actions" json:"actions,omitempty"`
}

func (m *CompactTx) Reset()                    { *m = CompactTx{} }
func (m *CompactTx) String() string            { return proto.CompactTextString(m) }
func (*CompactTx) ProtoMessage()               {}
func (*CompactTx) Descriptor() ([]byte, []int) { return file_compact_formats_proto_rawDesc, []int{1} }

func (m *CompactTx) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *CompactTx) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *CompactTx) GetFee() uint32 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *CompactTx) GetSpends() []*CompactSaplingSpend {
	if m != nil {
		return m.Spends
	}
	return nil
}

func (m *CompactTx) GetOutputs() []*CompactSaplingOutput {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *CompactTx) GetActions() []*CompactOrchardAction {
	if m != nil {
		return m.Actions
	}
	return nil
}

// CompactSaplingSpend is a Sapling Spend Description as described in 7.3 of the Zcash
// protocol specification.
type CompactSaplingSpend struct {
	Nf []byte `protobuf:"bytes,1,opt,name=nf,proto3" json:"nf,omitempty"`
}

func (m *CompactSaplingSpend) Reset()                    { *m = CompactSaplingSpend{} }
func (m *CompactSaplingSpend) String() string            { return proto.CompactTextString(m) }
func (*CompactSaplingSpend) ProtoMessage()               {}
func (*CompactSaplingSpend) Descriptor() ([]byte, []int) { return file_compact_formats_proto_rawDesc, []int{2} }

func (m *CompactSaplingSpend) GetNf() []byte {
	if m != nil {
		return m.Nf
	}
	return nil
}

// output is a Sapling Output Description as described in section 7.4 of the
// Zcash protocol spec. Total size is 948.
type CompactSaplingOutput struct {
	Cmu        []byte `protobuf:"bytes,1,opt,name=cmu,proto3" json:"cmu,omitempty"`
	Epk        []byte `protobuf:"bytes,2,opt,name=epk,proto3" json:"epk,omitempty"`
	Ciphertext []byte `protobuf:"bytes,3,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
}

func (m *CompactSaplingOutput) Reset()                    { *m = CompactSaplingOutput{} }
func (m *CompactSaplingOutput) String() string            { return proto.CompactTextString(m) }
func (*CompactSaplingOutput) ProtoMessage()               {}
func (*CompactSaplingOutput) Descriptor() ([]byte, []int) { return file_compact_formats_proto_rawDesc, []int{3} }

func (m *CompactSaplingOutput) GetCmu() []byte {
	if m != nil {
		return m.Cmu
	}
	return nil
}

func (m *CompactSaplingOutput) GetEpk() []byte {
	if m != nil {
		return m.Epk
	}
	return nil
}

func (m *CompactSaplingOutput) GetCiphertext() []byte {
	if m != nil {
		return m.Ciphertext
	}
	return nil
}

// https://github.com/zcash/zips/blob/main/zip-0225.rst#orchard-action-description-orchardaction
// (but not all fields are needed)
type CompactOrchardAction struct {
	Nullifier    []byte `protobuf:"bytes,1,opt,name=nullifier,proto3" json:"nullifier,omitempty"`
	Cmx          []byte `protobuf:"bytes,2,opt,name=cmx,proto3" json:"cmx,omitempty"`
	EphemeralKey []byte `protobuf:"bytes,3,opt,name=ephemeralKey,proto3" json:"ephemeralKey,omitempty"`
	Ciphertext   []byte `protobuf:"bytes,4,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
}

func (m *CompactOrchardAction) Reset()                    { *m = CompactOrchardAction{} }
func (m *CompactOrchardAction) String() string            { return proto.CompactTextString(m) }
func (*CompactOrchardAction) ProtoMessage()               {}
func (*CompactOrchardAction) Descriptor() ([]byte, []int) { return file_compact_formats_proto_rawDesc, []int{4} }

func (m *CompactOrchardAction) GetNullifier() []byte {
	if m != nil {
		return m.Nullifier
	}
	return nil
}

func (m *CompactOrchardAction) GetCmx() []byte {
	if m != nil {
		return m.Cmx
	}
	return nil
}

func (m *CompactOrchardAction) GetEphemeralKey() []byte {
	if m != nil {
		return m.EphemeralKey
	}
	return nil
}

func (m *CompactOrchardAction) GetCiphertext() []byte {
	if m != nil {
		return m.Ciphertext
	}
	return nil
}

func init() {
	proto.RegisterType((*CompactBlock)(nil), "cash.z.wallet.sdk.rpc.CompactBlock")
	proto.RegisterType((*CompactTx)(nil), "cash.z.wallet.sdk.rpc.CompactTx")
	proto.RegisterType((*CompactSaplingSpend)(nil), "cash.z.wallet.sdk.rpc.CompactSaplingSpend")
	proto.RegisterType((*CompactSaplingOutput)(nil), "cash.z.wallet.sdk.rpc.CompactSaplingOutput")
	proto.RegisterType((*CompactOrchardAction)(nil), "cash.z.wallet.sdk.rpc.CompactOrchardAction")
}

func init() { proto.RegisterFile("compact_formats.proto", file_compact_formats_proto_rawDesc) }

var file_compact_formats_proto_rawDesc = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xdd, 0x6a, 0x14, 0x31,
	0x14, 0x76, 0x66, 0x67, 0xa7, 0xf6, 0xb8, 0x15, 0x89, 0x6d, 0x09, 0x2a, 0x32, 0x0c, 0x08, 0x8b,
	0xc2, 0x08, 0xf5, 0x09, 0x5c, 0x11, 0x04, 0x2f, 0x0a, 0xa9, 0x78, 0xd1, 0x1b, 0x89, 0x99, 0x33,
	0x9d, 0xb0, 0xf3, 0x13, 0x92, 0x6c, 0x1d, 0x5f, 0xc1, 0x37, 0xf0, 0x55, 0x7c, 0x14, 0x9f, 0x46,
	0x92, 0xc9, 0x8e, 0xdd, 0xb2, 0x94, 0x5e, 0xe5, 0xe4, 0xe3, 0x7c, 0x3f, 0xe7, 0x70, 0xe0, 0x44,
	0xf4, 0xad, 0xe2, 0xc2, 0x7e, 0xab, 0x7a, 0xdd, 0x72, 0x6b, 0x0a, 0xa5, 0x7b, 0xdb, 0x93, 0x13,
	0x25, 0x35, 0xb7, 0x58, 0xfc, 0xe0, 0x4d, 0x83, 0xb6, 0x30, 0xe5, 0xba, 0xd0, 0x4a, 0xe4, 0x7f,
	0x23, 0x58, 0x7c, 0x18, 0x09, 0xab, 0xa6, 0x17, 0x6b, 0x92, 0xc3, 0xc2, 0x13, 0xbe, 0xa2, 0x36,
	0xb2, 0xef, 0x68, 0x94, 0x45, 0xcb, 0x23, 0xb6, 0x83, 0x91, 0x53, 0x48, 0x6b, 0x94, 0x57, 0xb5,
	0xa5, 0x71, 0x16, 0x2d, 0x13, 0x16, 0x7e, 0x84, 0x40, 0x52, 0x73, 0x53, 0xd3, 0x59, 0x16, 0x2d,
	0x17, 0xcc, 0xd7, 0xe4, 0x19, 0x3c, 0x54, 0x1a, 0xaf, 0x3f, 0x39, 0x3c, 0xf1, 0xf8, 0xf4, 0x77,
	0xfd, 0x56, 0xb6, 0x48, 0xe7, 0xde, 0xc3, 0xd7, 0xa3, 0x36, 0x2f, 0x51, 0xd3, 0xd4, 0x77, 0x87,
	0x1f, 0x39, 0x83, 0xd9, 0xb5, 0x1d, 0xe8, 0x41, 0x36, 0x5b, 0x3e, 0x3a, 0xcb, 0x8a, 0xbd, 0xd3,
	0x14, 0x61, 0x92, 0x2f, 0x03, 0x73, 0xcd, 0xf9, 0xef, 0x18, 0x0e, 0x27, 0x88, 0x1c, 0xc3, 0x5c,
	0x76, 0x25, 0x0e, 0x7e, 0xa4, 0x84, 0x8d, 0x9f, 0x29, 0x73, 0x7c, 0x23, 0xf3, 0x13, 0x98, 0x55,
	0x88, 0x7e, 0x8c, 0x23, 0xe6, 0x4a, 0xb2, 0x82, 0xd4, 0x28, 0xec, 0x4a, 0x43, 0x13, 0x1f, 0xe0,
	0xf5, 0xdd, 0x01, 0x2e, 0xb8, 0x6a, 0x64, 0x77, 0x75, 0xe1, 0x28, 0x2c, 0x30, 0xc9, 0x47, 0x38,
	0xe8, 0x37, 0x56, 0x6d, 0xac, 0xa1, 0x73, 0x2f, 0xf2, 0xe6, 0x5e, 0x22, 0xe7, 0x9e, 0xc3, 0xb6,
	0x5c, 0x27, 0xc3, 0x85, 0x95, 0x7d, 0x67, 0x68, 0x7a, 0x1f, 0x99, 0x73, 0x2d, 0x6a, 0xae, 0xcb,
	0xf7, 0x9e, 0xc3, 0xb6, 0xdc, 0xfc, 0x15, 0x3c, 0xdd, 0x13, 0x96, 0x3c, 0x86, 0xb8, 0xab, 0xfc,
	0x86, 0x16, 0x2c, 0xee, 0xaa, 0xfc, 0x12, 0x8e, 0xf7, 0xc5, 0x71, 0x2b, 0x12, 0xed, 0x26, 0x34,
	0xba, 0xd2, 0x21, 0xa8, 0xd6, 0x61, 0x8f, 0xae, 0x24, 0x2f, 0x01, 0x84, 0x54, 0x35, 0x6a, 0x8b,
	0x83, 0x0d, 0x47, 0x71, 0x03, 0xc9, 0x7f, 0x45, 0x93, 0xf8, 0x4e, 0x48, 0xf2, 0x02, 0x0e, 0xbb,
	0x4d, 0xd3, 0xc8, 0x4a, 0xa2, 0x0e, 0x16, 0xff, 0x81, 0xd1, 0x7a, 0xd8, 0x1a, 0x89, 0x76, 0x70,
	0x37, 0x8b, 0xaa, 0xc6, 0x16, 0x35, 0x6f, 0x3e, 0xe3, 0xcf, 0x60, 0xb5, 0x83, 0xdd, 0x0a, 0x93,
	0xdc, 0x0e, 0xb3, 0x7a, 0x7e, 0x79, 0xda, 0xb8, 0x23, 0x1e, 0x97, 0x58, 0xbe, 0x1d, 0x5f, 0xad,
	0xc4, 0x9f, 0xf8, 0xc1, 0xf7, 0xd4, 0x9f, 0xff, 0xbb, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf6,
	0x79, 0x69, 0x05, 0x5c, 0x03, 0x00, 0x00,
}
